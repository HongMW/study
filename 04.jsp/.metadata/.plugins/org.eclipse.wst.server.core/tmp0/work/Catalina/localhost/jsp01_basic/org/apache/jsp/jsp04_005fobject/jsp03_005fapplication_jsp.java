/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2022-12-12 07:29:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp04_005fobject;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;

public final class jsp03_005fapplication_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Enumeration");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("	3. application 기본객체\r\n");
      out.write("	\r\n");
      out.write("			application기본객체는 웹애플리케이션 전역에 걸쳐서 사용되는 정보를 저장할 수 있다. 예를 들어\r\n");
      out.write("			application객체를 사용해서 초기설정정보, 서버정보, 웹애플리케이션에서 제공하는 정보들을 공통\r\n");
      out.write("			으로 공유해서 사용할 수 있다.\r\n");
      out.write("			\r\n");
      out.write("			서블릿규약에서는 웹애플리케이션 전체에 걸쳐서 사용(공유)할 수 있는 초기화 파라미터를 정의하고\r\n");
      out.write("			있는데 초기화 파라미터는 web.xml의 <context-params>태그를 사용하여 추가할 수 있다.\r\n");
      out.write("			\r\n");
      out.write("			[ web.xml 이란? ]\r\n");
      out.write("			\r\n");
      out.write("			web.xml파일은 웹애플리케이션을 위한 설정정보를 가지고 있는 파일이다. jsp프로그래밍을 할 때\r\n");
      out.write("			꼭 필요한 피일은 아니지만 환경설정파로서 중요한 파일이다. 이 파일은 반드시 WEB-INF폴더에\r\n");
      out.write("			위치해야 한다. 다른 폴더에 위치하게 될 경우는 이 파일을 인식하지 못한다.\r\n");
      out.write("			\r\n");
      out.write("			[ application객체의 초기화 메서드 ]\r\n");
      out.write("			\r\n");
      out.write("			a. getServerInfo() : 웹서버정보를 리턴\r\n");
      out.write("			b. getMajorVerion() : 웹서버가 지원하는 서블릿규약의 메이저정보를 리턴\r\n");
      out.write("			c. getMinorVersion() : 웹서버가 지원하는 서블릿규약의 마이너정보를 리턴\r\n");
      out.write("			 d. log() : application객체는 웹컨테이너가 사용하는 로그파일에 로그 메시지를 기록할 수 있는 메서드\r\n");
      out.write("	      ... 톰캣설치폴더/logs폴더에 localhost_log.yyyy-mm-dd.log파일에 메시지가 기록된다.\r\n");
      out.write("-->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>웹서버 관련 정보</h1>\r\n");
      out.write("	<h3>서버정보        : ");
      out.print( application.getServerInfo() );
      out.write("</h3>\r\n");
      out.write("	<h3>서버메이저정보  : ");
      out.print( application.getMajorVersion() );
      out.write("</h3>\r\n");
      out.write("	<h3>서버마이너정보  : ");
      out.print( application.getMinorVersion() );
      out.write("</h3>\r\n");
      out.write("	<h3>서버ContextPath : ");
      out.print( application.getContextPath() );
      out.write("</h3>\r\n");
      out.write("	<h3>서버초기파라미터: ");
      out.print( application.getInitParameterNames() );
      out.write("</h3>\r\n");
      out.write("	<hr />\r\n");
      out.write("	\r\n");
      out.write("	<h1>웹서버의 초기화 파라미터</h1>\r\n");
      out.write("	<ul>\r\n");
      out.write("		");

			Enumeration<String> init_params = application.getInitParameterNames();
			while(init_params.hasMoreElements()) {
				String param_name = init_params.nextElement();
		
      out.write("\r\n");
      out.write("				<li>");
      out.print( param_name );
      out.write(' ');
      out.write(':');
      out.write(' ');
      out.print( application.getInitParameter(param_name) );
      out.write("</li>\r\n");
      out.write("		");

			}
		
      out.write("\r\n");
      out.write("	</ul>\r\n");
      out.write("	<hr />\r\n");
      out.write("	\r\n");
      out.write("	<h1>로그메시지 기록하기</h1>\r\n");
      out.write("	");

		application.log("application객체 : 로그메시지 기록하기...");
		log("jsp페이지가 제공하는 log()메서드 : jsp페이지의 log메서드의 로그메시지 기록하기!!");
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
