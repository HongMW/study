/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2022-12-12 04:01:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp02_005felements;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jsp11_005fresponse_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- HTML주석 -->\r\n");
      out.write("<!-- JSP주석 -->\r\n");
      out.write("<!-- \r\n");
      out.write("	response 기본객체(HttpSercletResponse)\r\n");
      out.write("	\r\n");
      out.write("	response객체는 request객체와 반대기능을 가기고 있다. request객체가 웹브라우저로 전송한\r\n");
      out.write("	요청정보를 저장하고 있다면 response객체는 웹서버가 웹브라우저로 전송한 응답정보를 가지고\r\n");
      out.write("	있다.\r\n");
      out.write("	\r\n");
      out.write("	A. response객체의 메서드\r\n");
      out.write("	\r\n");
      out.write("		a. addDateHeader(String name, long date)  : name이라는 헤더에 long 타입의 date값을 추가\r\n");
      out.write("		b. addHeader(String name, String value)   : name이라는 헤더에 String 타입의 값을 추가\r\n");
      out.write("		c. addIntHeader(String name, int value)   : name이라는 헤더에 int 타입의 값을 추가\r\n");
      out.write("		d. setHeader(String name, String value)	  : name이라는 헤더에 String 타입의 값을 저장(수정\r\n");
      out.write("		e. setIntHeader(String name, int value)   : name이라는 헤더에 int 타입의 값을 저장\r\n");
      out.write("		f. setDateHeader(String name, long value) : name이라는 헤더에 long 타입의 date 값을 저장\r\n");
      out.write("		\r\n");
      out.write("	B. 웹브라우저에 cache제어 관련 응답헤더\r\n");
      out.write("	\r\n");
      out.write("		jsp를 비롯한 웹애플리케이션을 개발할 경우 새로운 내용을 DB에 추가했음에도 웹브라우저에\r\n");
      out.write("		출력되는 내용이 변경되지 않는 경우가 있는데 그 이유중 하나가 웹브라우저가 서버에서 생성된\r\n");
      out.write("		결과를 출력하지 않고 캐시에 저장된 데이터를 출력하기 때문이다.\r\n");
      out.write("		\r\n");
      out.write("		캐시(cache)란? 웹브라우저가 WAS에 jsp실행을 요청하고 잠시 뒤에 동인한 JSP 실행을 요청하는\r\n");
      out.write("		경우에 첫 번째요청과 두 번째 요청사이에 결과값이 차이가 없을 경우에 불필요한 응답결과를\r\n");
      out.write("		반복해서 요청하는 셈이 된다. 캐시는 이렇게 동일한 데이터를 중복해서 로딩하지 않도록 할 경우\r\n");
      out.write("		에 사용한다. 웹브라우저는 첫 번째 요청시에 응답굘과를 로컬PC의 임시저장소인 캐시에 저장한다.\r\n");
      out.write("		\r\n");
      out.write("		이우에 동일한 URL에 대한 요청이 있을 경우에 WAS에 접근하지 않고 로컬PC에 저장된 응답결과를\r\n");
      out.write("		사용한다. 캐시에 보관된 데이터를 사용할 경우 서버에 접근하지 않기 때문에 훨씬 빠른 결과를\r\n");
      out.write("		웹브라우저에 출력할 수 있게 된다.\r\n");
      out.write("		\r\n");
      out.write("		따라서, 견경이 발생하지 않을 경우 jsp의 응답결과나 이미지, 정적인 html등은 캐시에 보관함\r\n");
      out.write("		으로서 웹브라우저의 응답속도를 향상시킬 수가 있다.\r\n");
      out.write("		\r\n");
      out.write("	C. response객체가 제공하는 헤더추가 메서드\r\n");
      out.write("	\r\n");
      out.write("		a. Cache-Control : 이 헤더값을 \"no-cache\"로 지정하더라도 응답정보를 캐시에 저장할 수 있다.\r\n");
      out.write("							캐시에 저장하지 않도록 하려면 이 헤더의 값에 \"no-store\"를 추가 \r\n");
      out.write("		b. Pragma		 : 이 헤더값을 \"no-cache\"로 지정하면 웹브라우저는 캐시를 사용하지 않는다. \r\n");
      out.write("		C.Expries		 : 응답결과의 완료시간을 지정한다.\r\n");
      out.write("	\r\n");
      out.write("	D. 리다이렉트(redirect)\r\n");
      out.write("	\r\n");
      out.write("		response객체가 가장 많이 사용하는 기능중 하나이다. 리다이렉트는 웹서버가 웹브라우저에게\r\n");
      out.write("		다른 페이지로 이동하라고 응답하는 기능이다.\r\n");
      out.write("		\r\n");
      out.write("		response객체는 sendRedirect(String location)메서드를 이용해서 웹브라우저가 다른 페이지로\r\n");
      out.write("		이동하도록 지시할 수 있다.\r\n");
      out.write(" -->\r\n");
      out.write(" ");

	String id = request.getParameter("id");
	if(id != null && id.equals("hong")) {
		response.sendRedirect("jsp11_login_success.jsp");
	} else {

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\" />\r\n");
      out.write("	<title>Document</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1 class=\"primary\">아이디가 null이거나 잘못된 아이디 입니다!!</h1>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
		
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
