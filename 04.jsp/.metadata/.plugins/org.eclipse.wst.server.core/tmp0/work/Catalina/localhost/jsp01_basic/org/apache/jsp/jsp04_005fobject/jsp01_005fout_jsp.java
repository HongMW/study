/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2022-12-12 06:32:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp04_005fobject;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jsp01_005fout_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("	JSP에서 사용하는 기본객체와 영역(scope)	\r\n");
      out.write("	\r\n");
      out.write("	A. 기본객체\r\n");
      out.write("	\r\n");
      out.write("	   1. request(javax.servlet.jsp.HttpServletRequest) : 클라이언트의 요청정보를 저장하는 객체\r\n");
      out.write("	   2. response(javax.servlet.jsp.HttpServletResponse) : 웹서버의 응답정보를 저장\r\n");
      out.write("	   3. out(javax.servlet.jsp.JspWriter) : jsp페이지의 생성결과를 출력할 때 사용하는 출력문자스트림\r\n");
      out.write("	   4. pageContext(javax.servlet.jsp.PageContext) : jsp페이지에 대한 정보를 저장\r\n");
      out.write("	   5. session(javax.servlet.http.HttpSession) : Http세션정보를 저장\r\n");
      out.write("	   6. application(javax.servlet.jsp.ServletContext) : 웹애플리케이션에 대한 정보를 저장\r\n");
      out.write("	   \r\n");
      out.write("	   7. page(java.lang.Object) : JSP페이지를 구현현 java클래스의 인스턴스(객체)\r\n");
      out.write("	   8. config(javax.servlet.ServletConfig) : jsp페이지에 대한 설정정보를 저장\r\n");
      out.write("	   9. exception(java.lang.Throwable) : Exception객체, 에러페이지라고 정의된 페이지에서만 사용이 가능\r\n");
      out.write("-->\r\n");
      out.write("<!-- \r\n");
      out.write("	1. out 기본객체\r\n");
      out.write("	\r\n");
      out.write("	   out객체는 웹브라우저에 데이터를 전송하는 출력스트림으로서 jsp가 생성한 데이터를 웹페이지에\r\n");
      out.write("	   출력한다.\r\n");
      out.write("	   \r\n");
      out.write("	   1) out객체의 출력메서드\r\n");
      out.write("	   \r\n");
      out.write("	      a. print()   : 데이터를 출력\r\n");
      out.write("	      b. println() : 데이터를 출력후 줄바꿈\r\n");
      out.write("	      c. newLine() : 줄바꿈\r\n");
      out.write("	      d. writer()  : DOM태그를 html에 출력\r\n");
      out.write("	      \r\n");
      out.write("	   2) out객체의 buffer관련 메서드\r\n");
      out.write("	   \r\n");
      out.write("	      a. getBufferSize() : 버퍼의 크기를 리턴\r\n");
      out.write("	      b. getRemaining()  : 버퍼의 남은 크기를 리턴\r\n");
      out.write("	      c. clear()         : 버퍼전체를 비움, 이미 flush가 되어 있다면 익셉션 발생\r\n");
      out.write("	      d. clearBuffer()   : 버퍼전체를 비움, 이미 flush가 되어 있다면 익셉션 발생시키지 않음\r\n");
      out.write("	      e. flush()         : 버퍼를 flust처리\r\n");
      out.write("	      f. isAutoFlush()   : 자동 flush여부를 boolean으로 리턴\r\n");
      out.write(" -->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
 out.println("<h1>안녕하세요? out기본객체입니다!</h1>"); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 out.print("안녕하세요?"); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 out.print("반갑습니다!"); 
      out.write("\r\n");
      out.write("	<hr />\r\n");
      out.write("	\r\n");
      out.write("	<h3>out기본객체의 buffer관련 메서드</h3>\r\n");
      out.write("	<h4>버퍼의 크기   : ");
      out.print( out.getBufferSize() );
      out.write("</h4>\r\n");
      out.write("	<h4>버퍼의 잔량   : ");
      out.print( out.getRemaining() );
      out.write("</h4>\r\n");
      out.write("	<h4>AutoFlush여부 : ");
      out.print( out.isAutoFlush() );
      out.write("</h4>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
