/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2022-12-12 02:23:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp02_005felements;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jsp07_005frequest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("	request 기본객체(HttpSetbletRequest)\r\n");
      out.write("	\r\n");
      out.write("	request기본객체는 jsp페이지에서 가장 많이 사용되는 객체로서 웹브라오저의 요청과 관련있는 객체이다.\r\n");
      out.write("	웹브라우저에서 웹사이트주소를 입력하면 웹브라우저는 해당 주서의 웹서버에 연결 한 후 요청정보를 전송\r\n");
      out.write("	하는데 이 요청 정보를 웹서버에 전달하는 객체가 request객체이다.\r\n");
      out.write("	\r\n");
      out.write("	A. request객체가 제공하는 기능\r\n");
      out.write("	\r\n");
      out.write("		a. 클라이언트(웹브라우저)와 관련된 정보\r\n");
      out.write("		b. 서버와 관련된 정보\r\n");
      out.write("		c. 클라이언트가 전송된 요청파라미터정보(http://localhost:8080?id=hong&pw=12345\r\n");
      out.write("		d. 클라이언트가 전송된 요청헤더정보(예 : http통신규약에 따른 정보)\r\n");
      out.write("		e. 클라이언트가 전송된 쿠키정보\r\n");
      out.write("		f. 속성처리정보\r\n");
      out.write("		\r\n");
      out.write("	B. request객체의 메서드\r\n");
      out.write("	\r\n");
      out.write("		a. getRemoteAddr()			: 웹서버에 연결한 클라이언트의 IP주소\r\n");
      out.write("		b. getContentLength()		: 클라이언트가 요청한 정보의 총 길이\r\n");
      out.write("		c. getCharacterEncoding()	: 클라이언트가 요청정보를 전송할 때 사용한 문자셋 정보0\r\n");
      out.write("		d. getContentType()			: 클라이언트가 요청정보를 전송할 때 사용한 컨텐트(문서)타입 정보\r\n");
      out.write("		e. getProtocol()			: 클라이언트가 요청한 프로토콜(http, https, ftp...)\r\n");
      out.write("		f. getMethod()				: 웹브라우저가 정보를 전송할 때 방신(get, post)\r\n");
      out.write("		g. getRequestURI()			: 웹브라우저가 요청한 URL정보 \r\n");
      out.write("		h. getContexPath()			: jsp페이지가 소속된 웹애플리케이션의 CintextPath정보\r\n");
      out.write("		i. getServerName()			: 연결할 때 사용한 웹서버의 이름\r\n");
      out.write("		j. getServerPort()			: 연결할 때 사용한 웹서버의 포트번호\r\n");
      out.write("		\r\n");
      out.write("	C. request객체의 요청파라미터 관련 메서드\r\n");
      out.write("	\r\n");
      out.write("		a. getParameter(String name)		: name인 파라미터의 값을 리턴, 없을 경우 \r\n");
      out.write("		b. getParameterValues(String name)	: name인 파라미터의 값을 배열로 리턴, 없을 경우 null\r\n");
      out.write("		c. getParameterNames()				: 웹브라우저가 전송한 파라미터의 이름 목록을 리턴\r\n");
      out.write("		d. getParameterMap()				: 웹브라우저가 전송한 파라미터를 Map타입으로 리턴\r\n");
      out.write("	\r\n");
      out.write("	D. request객체의 요청헤더 관련 메서드\r\n");
      out.write("	\r\n");
      out.write("		a. getHeader(String name)		: 지정한 name의 헤더값을 리턴\r\n");
      out.write("		b. getHeaders(String name)		: 지정한 name의 헤더목록을 리턴\r\n");
      out.write("		c. getHeaderNames(String name)	: 모든 헤더이름을 리턴\r\n");
      out.write("		d. getIntHeader(String name)	: 지정한 헤터의 값을 정수값으로 리턴\r\n");
      out.write("		e. getDateHeader(String name)	: 지정한 헤더의 값을 시간값으로 리턴\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write(" -->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>B. request객체의 메서드</h1>\r\n");
      out.write("	<h3>a. 클라이언트의 ip주소     : ");
      out.print( request.getRemoteAddr() );
      out.write("</h3>\r\n");
      out.write("	<h3>b. 요청정보의 길이         : ");
      out.print( request.getContentLength() );
      out.write("</h3>\r\n");
      out.write("	<h3>c. 요청정보의 인코딩       : ");
      out.print( request.getCharacterEncoding() );
      out.write("</h3>\r\n");
      out.write("	<h3>d. 요청정보의 컨텐츠타입   : ");
      out.print( request.getContentType() );
      out.write("</h3>\r\n");
      out.write("	<h3>e. 요청정보의 프로토콜     : ");
      out.print( request.getProtocol() );
      out.write("</h3>\r\n");
      out.write("	<h3>f. 요청정보의 전송방식     : ");
      out.print( request.getMethod() );
      out.write("</h3>\r\n");
      out.write("	<h3>g. 요청정보의 URI          : ");
      out.print( request.getRequestURI() );
      out.write("</h3>\r\n");
      out.write("	<h3>h. 요청정보의 컨텍스트경로 : ");
      out.print( request.getContextPath() );
      out.write("</h3>\r\n");
      out.write("	<h3>i. 요청정보의 서버이름     : ");
      out.print( request.getServerName() );
      out.write("</h3>\r\n");
      out.write("	<h3>j. 요청정보의 서버포트번호 : ");
      out.print( request.getServerPort() );
      out.write("</h3>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
