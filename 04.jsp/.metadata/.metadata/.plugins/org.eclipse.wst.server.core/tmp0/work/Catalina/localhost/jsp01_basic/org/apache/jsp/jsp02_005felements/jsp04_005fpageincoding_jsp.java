/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2022-12-12 01:18:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp02_005felements;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jsp04_005fpageincoding_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--  -->\r\n");
      out.write("<!-- \r\n");
      out.write("	JSP페이지의 인코딩과 pageEncoding속성\r\n");
      out.write("	\r\n");
      out.write("	JSP파일에서 문자셋을 잘못 지정하는 경우 응답결과 페이지의 문자들이 깨져서 출력이 된다.\r\n");
      out.write("	tomcat과 같은 컨테이너(웹서버)는 JSP를 분석하는 과정에서(~,java파일 생성) 어떤 인코딩을\r\n");
      out.write("	이용해서 코드를 작성했는지를 검사하고 그 결과를 선택한 케리터셋을 이용해서 JSP페이지의\r\n");
      out.write("	문자를 읽어 오게 된다. 웹컨테이너가 JSP페이지를 읽을 때 사용할 문자셋을 결정하는 과정은\r\n");
      out.write("	아래와 같다.\r\n");
      out.write("	\r\n");
      out.write("	1. 파일이 BOM으로 시작하지 않을 경우\r\n");
      out.write("	\r\n");
      out.write("		a. 기본 인코딩을 이용해서 파일을 처움브토 읽고 page디렉티브의 pageEncoding속성을 검색\r\n");
      out.write("		b. pageEncoding값을 가지고 있을 경우, 파일을 읽을 때 해당 속성값을 문자셋으로 사용\r\n");
      out.write("		c. pageEncoding값이 없을 경우 contentType의 charset속성값을 사용\r\n");
      out.write("		d. 상기 모두 해당되지 않을 경우에는 기본문자셋인 ISO -8859-1문자셋을 사용\r\n");
      out.write("	\r\n");
      out.write("	2. 파일이 BOM으로 시작할 경우\r\n");
      out.write("	\r\n");
      out.write("		a. BOM을 이용해서 결정된 인코딩을 이용해서 파일을 읽고 pageEncoding를 검색\r\n");
      out.write("		b. 만역, pageEncoding 속성갑과 BOM을 이용해서 결정된 문자셋이 다를 경우에는 에러가 발생\r\n");
      out.write("		\r\n");
      out.write("	3. 1 or 2번 관정을 통해서 결정된 문자셋을 jsp소스코드를 읽는다.\r\n");
      out.write("	\r\n");
      out.write(" -->\r\n");
      out.write("현재시간 : ");
      out.print( new java.util.Date() );
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
